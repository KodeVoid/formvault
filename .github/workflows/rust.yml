name: FormVault
on:
  push:
    tags:
      - '*'                     # trigger only on tags like v0.1.0

env:
  CARGO_TERM_COLOR: always
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  CARGO_INCREMENTAL: 0          # Disable incremental compilation for faster CI
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      
      - name: Cache Cargo registry and git
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: backend/target/
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles('backend/Cargo.lock') }}-
            ${{ runner.os }}-cargo-target-
      
      - name: Build
        run: cargo build --release --verbose
      
      - name: Fmt
        run: cargo fmt --all -- --check
      
      - name: Run tests
        run: cargo test --release --verbose
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-target
          path: |
            backend/target/release/formvault
            backend/target/release/deps/
          retention-days: 1       # Delete artifacts after 1 day

  release:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Restore Cargo registry and git cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('backend/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Restore build artifacts cache
        uses: actions/cache/restore@v4
        with:
          path: backend/target/
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('backend/Cargo.lock') }}-${{ hashFiles('backend/**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-cargo-target-${{ hashFiles('backend/Cargo.lock') }}-
      
      - name: Restore build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-target
          path: backend/target
      
      - name: Cache cargo-release binary
        id: cache-cargo-release
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-release
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('~/.cargo/bin/cargo-release') }}
      
      - name: Install cargo-release if missing
        if: steps.cache-cargo-release.outputs.cache-hit != 'true'
        run: cargo install --locked cargo-release
      
      - name: Run cargo release
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo release --execute --no-publish
      
      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish
